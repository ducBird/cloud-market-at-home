import React, { useEffect, useState } from "react";
import {
  Form,
  Input,
  Checkbox,
  Select,
  message,
  Upload,
  Button,
  ConfigProvider,
} from "antd";
import { AiOutlinePlus } from "react-icons/ai";
import { axiosClient } from "../../../../libraries/axiosClient";
import { API_URL } from "../../../../constants/URLS";
import axios from "axios";
import moment from "moment";
import { useUser } from "../../../../hooks/useUser";

const Profile = () => {
  const { users } = useUser((state) => state);
  const [file, setFile] = useState();
  const [updateForm] = Form.useForm();

  // validate phone number
  const phoneValidator = (rule, value, callback) => {
    const phoneNumberPattern =
      /^(0?)(3[2-9]|5[6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])[0-9]{7}$/;
    if (value && !phoneNumberPattern.test(value)) {
      callback("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
    } else {
      callback();
    }
  };

  // validate birth date
  const dateOfBirthValidator = (rule, value, callback) => {
    const dateFormat = "YYYY/MM/DD"; // ƒê·ªãnh d·∫°ng ng√†y th√°ng
    const currentDate = moment(); // L·∫•y ng√†y hi·ªán t·∫°i
    const dateOfBirth = moment(value, dateFormat); // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã nh·∫≠p v√†o th√†nh ki·ªÉu moment

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ng√†y sinh
    if (currentDate.diff(dateOfBirth, "days") < 0) {
      callback("Ng√†y sinh ph·∫£i nh·ªè h∆°n ng√†y hi·ªán t·∫°i");
    } else {
      callback();
    }
  };

  const onUpdateFinish = (values) => {
    axiosClient
      .patch("/customers/" + users.id, values)
      .then((response) => {
        if (values.file !== undefined) {
          //UPLOAD FILE
          const { _id } = response.data;
          const formData = new FormData();
          formData.append("file", file);
          axios
            .post(`${API_URL}/upload-image/customers/${_id}`, formData)
            .then((response) => {
              message.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            })
            .catch((err) => {
              message.error("T·∫£i l√™n h√¨nh ·∫£nh th·∫•t b·∫°i!");
            });
        }
        updateForm.resetFields();
      })
      .catch((err) => {
        message.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
        console.log(err);
      });
  };

  const onUpdateFinishFailed = (errors) => {
    console.log("üê£", errors);
  };

  return (
    <div className="xl:mt-[240px]">
      <Form
        className="mt-10 flex justify-center"
        form={updateForm}
        name="update-form"
        labelCol={{ span: 8 }}
        wrapperCol={{ span: 16 }}
        initialValues={users}
        onFinish={onUpdateFinish}
        onFinishFailed={onUpdateFinishFailed}
        autoComplete="off"
      >
        <div className="w-[60%] flex">
          {/* FirstName */}
          <div className="w-[80%]">
            <span>H·ªç - T√™n ƒê·ªám</span>
            <Form.Item
              hasFeedback
              name="firstName"
              rules={[
                {
                  required: true,
                  message: "H·ªç - T√™n ƒë·ªám kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                },
              ]}
            >
              <Input />
            </Form.Item>

            {/* LastName */}
            <span>T√™n</span>
            <Form.Item
              hasFeedback
              name="lastName"
              rules={[{ required: true, message: "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" }]}
            >
              <Input />
            </Form.Item>

            {/* Email */}
            <span>Email</span>
            <Form.Item
              hasFeedback
              name="email"
              rules={[
                { required: true, message: "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" },
                { type: "email", message: `Email kh√¥ng h·ª£p l·ªá!` },
              ]}
            >
              <Input disabled={users.accountType !== "email" ? true : false} />
            </Form.Item>

            {/* Password */}
            {users.accountType !== "email" ? (
              <></>
            ) : (
              <div>
                <span>M·∫≠t kh·∫©u</span>
                <Form.Item
                  hasFeedback
                  name="password"
                  rules={[
                    {
                      required: true,
                      message: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                    },
                  ]}
                >
                  <Input.Password />
                </Form.Item>
              </div>
            )}

            {/* Phone */}
            <span>S·ªë ƒëi·ªán tho·∫°i</span>
            <Form.Item
              hasFeedback
              name="phoneNumber"
              rules={[
                {
                  required: true,
                  message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                },
                { min: 10, message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng qu√° 10 ch·ªØ s·ªë!" },
                { max: 10, message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng qu√° 10 ch·ªØ s·ªë!" },
                {
                  validator: phoneValidator,
                },
              ]}
            >
              <Input />
            </Form.Item>

            {/* Address */}
            <span>ƒê·ªãa ch·ªâ</span>
            <Form.Item hasFeedback name="address">
              <Input />
            </Form.Item>

            {/* BirthDay */}
            <span>Ng√†y Sinh</span>
            <Form.Item
              hasFeedback
              name="birthDay"
              rules={[
                {
                  validator: dateOfBirthValidator,
                },
                { type: "date", message: "Ng√†y sinh kh√¥ng h·ª£p l·ªá" },
              ]}
            >
              <Input />
            </Form.Item>
            <Form.Item>
              <ConfigProvider
                theme={{
                  token: {
                    colorPrimary: "#005745",
                  },
                }}
              >
                <Button
                  type="primary"
                  htmlType="submit"
                  className="text-primary text-[16px] font-medium px-10 py-1 transition-all ease-in duration-300 hover:bg-primary hover:text-white hover:font-bold hover:px-20"
                >
                  L∆∞u
                </Button>
              </ConfigProvider>
            </Form.Item>
          </div>

          <div className="w-[20%] text-center">
            <Form.Item name="file">
              <Upload
                showUploadList={true}
                // listType="picture-card"
                beforeUpload={(file) => {
                  setFile(file);
                  return false;
                }}
              >
                <div className="flex justify-center items-center w-[100px] h-[100px] border border-dashed rounded-lg hover:cursor-pointer hover:border-blue-400 hover:bg-white transition-all ease-in duration-150">
                  <img src={users.avatar} alt="" srcset="" />
                </div>
              </Upload>
            </Form.Item>
          </div>
        </div>
      </Form>
    </div>
  );
};

export default Profile;
